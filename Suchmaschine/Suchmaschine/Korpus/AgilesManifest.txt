http://www.heise.de/developer/artikel/Agiles-Manifest-zehn-Jahre-spaeter-1188157.html

Jutta Eckstein
Agiles Manifest – zehn Jahre später
Agilität als Geisteshaltung

Die 17 ITler, die sich vor zehn Jahren am 12. Februar in den Rocky Mountains getroffen hatten, konnten sich damals sicherlich nicht vorstellen, welche Auswirkung ihr Agiles Manifest auf die Softwareentwicklung haben würde. Dass die Entwicklung noch nicht abgeschlossen ist, liegt in der Natur der Agilität begründet.

Erstaunlich ist auf jeden Fall, dass sich die 17 – übrigens alles weiße Männer mittleren Alters und vorrangig aus dem nordamerikanischen Raum – trotz ihrer großen Differenzen hinsichtlich einer optimalen Softwareentwicklung, tatsächlich in einem wichtigen Punkt einigen konnten: die inhärenten Grenzen des menschlichen Geistes zu respektieren und sich der Aufgabe als bescheidene Programmierer anzunähern, wie Andy Hunt das in Anlehnung an Ed Dijkstra in der Rückbetrachtung ausdrückte.

Natürlich diskutierten die Protagonisten in Snowbird (Utah) viele widersprüchliche, aber auch sich ergänzende Perspektiven zu den Themen Code, Modelle und den Menschen. Statt sich daran zu versuchen, die einzig wahre Softwareentwicklungsmethode und -technik zu definieren, legten sie schließlich den Schwerpunkt auf die Gemeinsamkeiten. Dafür war die Namensfindung "Agile Manifesto" nicht unerheblich. Ursprünglich kamen sie als Vertreter "leichtgewichtiger" Methoden zusammen, aber diese bis dahin für agile Softwareentwicklung übliche Bezeichnung erschien doch allen als zu leichtgewichtig im Sinne von zu unerheblich. Wie James Grenning betont, ist der Vorteil des Begriffs agil von großer Bedeutung: Einerseits möchte jedes Unternehmen sowieso agil sein und andererseits kann man seinem CEO oder Kunden relativ einfach davon überzeugen, dass man agil sein möchte – was schwieriger bis unmöglich wird, wenn man dieselben Menschen davon überzeugen möchte, dass man in Anlehnung an Extreme Programming (XP) zukünftig "extrem" sein möchte.

Auch wenn leicht der Eindruck entsteht, dass mit dem agilen Manifest agile Softwareentwicklung erfunden wurde – kann davon jedoch keine Rede sein. Der große Gewinn des agilen Manifests beziehungsweise des Begriff der agilen Softwareentwicklung war (und ist), dass es nun endlich einen Ausdruck für ein Wertesystem gab, das eine Vorgehensweise umfasst, die viele ITler (inklusive der Vertreter in Snowbird) zur Entwicklung von Software schon lange verwendeten. Dave Thomas betont in seinem Rückblick, dass dieses Wertesystem beziehungsweise diese Vorgehensweise bereits vor 25 Jahren bei Xerox PARC angewandt wurden. Das heißt, der Hauptgewinn und damit auch ein Grund für den nachfolgenden Zuspruch waren, dass es nun endlich einen Namen gab für eine ohnehin sinnvolle Art der Softwareentwicklung.

Die Autorin erinnert sich noch genau an ihren ersten Eindruck, als sie auf der OOPSLA 1997 in Atlanta zum ersten Mal von Scrum und XP hörte: Na klar, das ist doch die "natürliche" Art, Software zu entwickeln. Wobei zugegeben sei, dass sie zum damaligen Zeitpunkt hauptsächlich Software in Smalltalk entwickelte und sich eingehend mit Patterns beschäftigte. Denn, ob Zufall oder nicht, die meisten Vertreter, die in Snowbird zusammenkamen, waren einerseits Smalltalk-Entwickler und andererseits in der Welt der Patterns zu Hause. Daher war der Zugang für die Autorin auch "natürlicher". Die Verankerung in den Patterns verdeutlicht zudem, dass XP bereits 1996 und Scrum dann 2000 zunächst in Form von Patterns veröffentlicht wurden (siehe [1][2]).
Der Kern des Manifests


Die Startseite des Agilen Manifests, wie sie sich auch nach zehn Jahren noch zeigt Vergrößern
Bild: agilemanifesto.org

Im Folgenden sei nun nicht auf das Wertesystem und die Prinzipien eingegangen, das geschah schon des Öfteren an anderer Stelle. Dafür sei herausgestellt, was einige der Autoren des Manifests als Kern betrachten. Beispielsweise meint Andy Hunt, dass es das Wesentliche bei einer agilen Vorgehensweise sei, sich in kleinen Schritten voranzutasten, nicht zu viel auf einmal zu wollen oder sich durch Annahmen zu weit nach vorne zu lehnen. Weiterhin sollen Programmierer das Erstellte verifizieren und dabei ihrem eigenen Können misstrauen. Darüber hinaus fordert er von ihnen, die nächsten Schritte offen und ehrlich zu diskutieren und nicht von der Annahme auszugehen, dass sie etwas besser wüssten als andere.

Für Ward Cunningham steht im Mittelpunkt agiler Softwareentwicklung, dass die Entwickler zusammen programmieren, gemeinsam über ihre Erfahrung reflektieren und aus dieser Erfahrung heraus einen neuen Sprachschatz erlernen – einen Sprachschatz, der auf Patterns und Zusammenarbeit basiert.
Der große Nutzen

Wenn auch viele Teams schon vor mehr als 25 Jahren die agilen Werte berücksichtigten, gab es auf der anderen Seite nicht wenige Teams, die beispielsweise kein Versionskontrollsystem verwendeten, sondern sich nur auf die Sourcecode-Dateien innerhalb eines gemeinsamen Laufwerks verließen – nach dem Motto: "Der Letzte gewinnt." Solch eine Arbeitsweise ist heute nicht mehr weit verbreitet. Hunt ist der Ansicht, dass es ein großer Gewinn der agilen Softwareentwicklung sei, dass Unit-Tests und deren Varianten zunehmend akzeptiert und eingesetzt würden und selbst Pair Programming, was oft kritisch beäugt wurde, nicht mehr als so furchteinflößend gelte wie früher. Das heißt, viele mit agilen Vorgehensweisen eingeführte Werkzeuge und Entwicklungspraktiken sind heute "state of the art", und zwar sogar unabhängig davon, ob man (vorgeblich) agil entwickelt oder nicht. Ron Jeffries fasst die Leistung des Manifests sogar noch wesentlich weiter: Sie hätten etwas Großartiges geschaffen und nebenbei die Welt, gemeint ist wohl die der Softwareentwicklung, verändert.

Grundsätzlich lässt sich festhalten, dass agile Vorgehensweisen von Entwicklern fordern, sich umzustellen, und zwar sowohl hinsichtlich der von ihnen eingesetzten Tools als auch der Entwicklungsmethoden. Viel gravierender ist jedoch laut Ken Schwaber, dass sie eine Umstellung der Fähigkeiten, Überzeugungen und Gewohnheiten fordern. Insofern betont Schwaber, dass das agile Manifest eine leise Revolution in der Hinsicht war, dass Mitarbeiter nicht länger als Ressourcen betrachtet wurden. Stattdessen gilt, wie der Konzern IBM das in seinem Slogan sagt: "Die Menschen sind unser wertvollstes Gut". Schwaber übersetzt das mit "Wir sind das Volk". Damit geht einher, was Cunningham betont, nämlich dass durch das Manifest die Programmierer eine neu entdeckte Reputation für ihre Arbeit erlangten.

Allerdings sei eingeräumt, dass die bessere Reputation nur innerhalb der IT wahrgenommen wird. Das Image des Informatikers ist in den letzten Jahren eher schlechter geworden. Viele Universitäten kämpfen damit, Studenten für das Fach Informatik zu gewinnen. Aber eventuell liegt das auch an den noch offenen Punkten, auf die im Folgenden eingegangen sei.


Offene Punkte

Eines der größten Probleme ist Andy Hunt zufolge, dass die agilen Softwareentwicklungsmethoden immer noch nicht breitflächig in Akademien und Universitäten gelehrt würden. Nach wie vor gibt es Absolventen, die noch nie in einem Team gearbeitet, noch nie ein Versionskontrollsystem eingesetzt oder einen Unit-Test geschrieben haben. In der Industrie hingegen erlebt man ein anderes Phänomen: Dort weiß man, wie man Agilität einsetzt, aber nicht wie man agil ist. Das liegt mitunter daran – und hier zitiert Hunt Patricia Benner –, "dass sich Methoden nie vollständig formalisieren lassen, da sie immer im spezifischen Zusammenhang in Echtzeit neu auszuarbeiten sind" [3]. Daraus folgert er, dass der wirklich offene Punkt der ist, dass es keine wirkliche Unterstützung dafür gibt, wie die Beteiligten neue Methoden in einem spezifischen Kontext finden können, die für sie in ihrer Umgebung funktionieren. Das ist laut Hunt das eigentliche Geheimnis der Agilität. Es geht also nicht um Pair Programming oder um Daily-Scrum-Meetings, denn jeder kann dogmatisch Methoden folgen, die andere festgesetzt hatten.

Dies Geheimnis ist begründet in der Art und Weise, wie Menschen lernen. Alistair Cockburn hat das einmal aus den asiatischen Kampfsportarten übertragen. Es geht darum, dass Menschen üblicherweise in Stufen lernen. Die Stufen, die sie dabei durchlaufen, heißen in den asiatischen Kampfsportarten Shu, Ha und Ri. Shu bezeichnet die erste Stufe und bedeutet, dass der Meister vorgibt, was wie wann zu tun ist (Pair Programming, Daily Scrums, Unit-Tests et cetera). Dessen Anweisungen folgt der Schüler lediglich. Nach dem Meistern der ersten Stufe setzt man in Ha immer noch die vorgegebenen Methoden ein, jedoch kann man verstehen, warum welche Methode wann eingesetzt wird. Das heißt, es lässt sich differenziert beurteilen, welches Ziel welche Methode verfolgt. Erst wenn dieser Schritt verinnerlicht wurde, kann man sich auf die letzte Lernstufe konzentrieren. Bei Ri geht es darum, selbst neue Methoden zu entwickeln, je nach dem, was die Situation gerade erfordert. Das ist ein Problem, denn eine agile Vorgehensweise verlangt, dass man sich auf der dritten Lernstufe befindet, zumindest ist das die "wirkliche" Agilität. Um dorthin zu gelangen, müssen allerdings alle die anderen zwei Stufen meistern und sich auch darauf einlassen, dass es jetzt plötzlich in der dritten Stufe keine Rezepte, keine definierten Vorgehensweisen mehr gibt. Beides zu akzeptieren bedeutet eine große Herausforderung.

Grenning meint deswegen, dass sie sich im Klaren darüber seien, mit dem agilen Manifest etwas geschaffen zu haben, das vielen Entwicklungsteams helfen kann, aus ihren ausgefahrenen Gleisen zu kommen. Jedoch seien noch nicht alle bereit für solch eine Veränderung. Grundsätzlich gestalten sich Veränderungen immer schwierig, aber die einzige Möglichkeit, besser zu werden, besteht in der Veränderung. Damit stößt man auf einen weiteren Einflussfaktor auf die agile Entwicklung eingegangen: Lean. Und hierbei vor allem Kaizen, das sich genau darauf bezieht, dass sich eine Veränderung (auch unternehmensweit) nur vollziehen lässt, wenn jeder Einzelne sich bewegt und verändert. Selbst wenn sich nach Arie van Bennekum bereits viel geändert hat – so wird mehr und mehr erkannt, dass es wichtiger ist, das Richtige zu tun, statt (egal was) richtig zu machen –, ist dennoch die alte Denkweise vor allem im Projektmanagement nach wie vor verankert und die Anwendung agiler Prinzipien ist dort notwendiger denn je.

Um agil(er) zu werden (hinsichtlich des eingesetzten Prozesses, der Denkweise oder der Zusammenarbeit), reicht es laut Thomas nicht aus, einen agilen Werkzeugkasten anzuschaffen, ein entsprechendes Poster aufzuhängen oder einen agilen Berater ins Haus zu holen. Denn was letztlich die Dinge agil werden lässt, ist die Art und Weise, wie man sie macht.

Fazit

Das agile Manifest hat auf alle Fälle viel bewegt, die Entwicklung ist jedoch noch lange nicht abgeschlossen. Das bestätigt auch, was Hunt betont: nämlich dass agile Vorgehensweisen nie fertig definiert sein können, sondern in Arbeit bleiben – andernfalls wären sie nicht agil.

Eine Entwicklung erschließt sich aus dem momentanen Bedarf: Die Autorin sieht immer häufiger Firmen, die sich nicht damit begnügen, durch eine agile Vorgehensweise Softwareprojekte erfolgreich zu gestalten. Sie wollen vielmehr auch auf anderen Ebenen von diesem Wertesystem profitieren. Das heißt, mehr und mehr Unternehmen versuchen, agile Werte und Prinzipien auch außerhalb der Softwareentwicklung einzusetzen und auf Organisationsebene zu übertragen. Dieser Wunsch ist naheliegend. Denn letzten Endes, so Jon Kern, ist die Agilität eine Geisteshaltung, eine Einstellung – nicht mehr und nicht weniger.